# Generated by Django 3.0.11 on 2021-08-02 14:58

import codershq.users.models
import codershq.users.validators
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='Name of User')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='Biography')),
                ('cv', models.FileField(blank=True, null=True, upload_to='cv', verbose_name="User's CV")),
                ('academic_qualification', models.CharField(blank=True, max_length=30, verbose_name="User's highest qualification")),
                ('academic_qualification_file', models.FileField(blank=True, null=True, upload_to='academic')),
                ('github_profile', models.CharField(blank=True, max_length=255, validators=[codershq.users.validators.validate_github_profile], verbose_name="User's GitHub profile")),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to=codershq.users.models.user_image_path, verbose_name='Profile image')),
                ('github_updated', models.DateTimeField(blank=True, null=True)),
                ('github_score', models.IntegerField(default=0)),
                ('front_end_score', models.IntegerField(default=20)),
                ('back_end_score', models.IntegerField(default=20)),
                ('database_score', models.IntegerField(default=20)),
                ('devops_score', models.IntegerField(default=20)),
                ('mobile_score', models.IntegerField(default=20)),
                ('fav_language', models.CharField(blank=True, max_length=150, verbose_name='Favourite programming language based on GitHub')),
                ('completed_challenges', models.PositiveIntegerField(default=0, verbose_name='Number of challenges completed')),
                ('language_preference', models.CharField(choices=[('EN', 'English'), ('AR', 'Arabic')], default='EN', max_length=2)),
                ('theme_preference', models.CharField(choices=[('LI', 'Light'), ('DA', 'Dark')], default='LI', max_length=2)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
